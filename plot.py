import shapely.geometry as sg
import shapely.ops as so
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import make_interp_spline
from matplotlib import patches

def get_ex_data():
    x = np.arange(0, 1.05, 1 / 20)
    y1 = [0.93972019, 0.36888917, 0.8497665, 0.92831205, 0.82090202, 0.83677631, 0.93005815, 0.99004352, 0.59394092, 0.46640899, 0.77065612, 0.96000998,
          0.93799786, 0.78855405, 0.92821585, 0.87816756, 0.97225839, 0.93633211, 0.99342242, 0.9773711, 1.0]
    y2 = [0.74498084, 0.6753079, 0.9339694, 0.26502189, 0.5026732, 0.70443852, 0.34646387, 0.87971692, 0.728204, 0.62927408, 0.80889927, 0.84431554, 0.78936909,
          0.95981156, 0.7696356, 0.80937455, 0.83093156, 0.75882624, 0.84155247, 0.95338016, 1.0]
    X_Y_Spline1 = make_interp_spline(x, y1)
    X_Y_Spline2 = make_interp_spline(x, y2)
    X_ = np.linspace(x.min(), x.max(), 500)
    Y_1 = X_Y_Spline1(X_)
    Y_2 = X_Y_Spline2(X_)

    return X_, Y_1, Y_2
def draw_step_function_ex():
    plt.vlines(x=0.2, ymin=0, ymax=0.5, color='red', zorder=1)
    plt.hlines(y=0.3, xmin=0, xmax=0.2, color='blue', zorder=1)
    plt.hlines(y=0.5, xmin=0.2, xmax=0.6, color='blue', zorder=1)
    plt.hlines(y=0.8, xmin=0.6, xmax=1.0, color='blue', zorder=1)
    plt.vlines(x=0.6, ymin=0.5, ymax=0.8, color='red', zorder=1)
    plt.vlines(x=1.0, ymin=0.8, ymax=1.0, color='red', zorder=1)
    plt.scatter([0.0, 0.2, 0.6], [0.3, 0.5, 0.8], color='blue', zorder=2)
    plt.scatter([0.2, 0.6, 1.0], [0.3, 0.5, 0.8], color='blue', facecolors='none', zorder=3)
    plt.scatter([0.2, 0.6, 1.0], [0.0, 0.5, 0.8], color='red', zorder=2)
    plt.scatter([0.2, 0.6, 1.0], [0.5, 0.8, 1.0], color='red', facecolors='none', zorder=3)

    plt.xlabel("$v_1$", fontsize=14)
    plt.ylabel("$v_2$", fontsize=14)
    plt.title("Example of Step Functions for a Mechanism", fontsize=18, y=1.01)
    plt.legend(["$f_1(v_2)$", "$f_2(v_1)$"])

    plt.grid()
    plt.show()

def get_restrictions(x, y):
    d = {x[i]: y[i] for i in range(len(x))}
    r = 0
    R = {0.0: 0.0}
    while len(d) > 0:
        m = min(d.keys())
        if d[m] >= r:
            R[m] = d[m]
            r = d[m]
        del d[m]
    return R

def draw_restrictions2(x, y):
    last = 0
    delta = 0.1
    xs = [0.0]
    ys = [0.0]
    for i in range(len(x)):
        if y[i] - last > delta:
            xs.append(x[i])
            ys.append(last)
            plt.plot(xs, ys, 'g')
            xs = []
            ys = []
        else:
            xs.append(x[i])
            ys.append(y[i])
        last = y[i]
    h = plt.plot(xs, ys, 'g')
    print(xs, ys)
    return h

def draw_prime2(rect=False):
    if rect:
        x = [0.0, 0.22796545219495468, 0.2280251270926629, 0.3431373136961936, 0.34402288826719696, 0.34800358066734777, 0.3552195543542417, 0.36545747666697875, 0.378477872978931, 0.3940412686634702, 0.41190818909396854, 0.4318391596437977, 0.4318391596437977, 0.45359470568633004, 0.47693535259493725, 0.5016216257429914, 0.5274140505038646, 0.5540731522509286, 0.5813594563575553, 0.6090334881971169, 0.6176915438951646, 0.6179681202052336, 0.671768850712885, 0.671768850712885, 0.7585918461056117, 0.7589293331225391, 0.7595826118703779, 0.7606313440066891, 0.7620569202863146, 0.7638407314640964, 0.7659641682948762, 0.7684086215334963, 0.7711554819347984, 0.7741861402536248, 0.7774819872448172, 0.7810244136632177, 0.7847948102636682, 0.7887745678010106, 0.7929450770300874, 0.7972877287057399, 0.8017839135828104, 0.8064150224161408, 0.8111624459605732, 0.8160075749709492, 0.8209318002021115, 0.8259165124089012, 0.8309431023461609, 0.8359929607687323, 0.8410474784314573, 0.8460898739967836, 0.8511132528757007, 0.8561140478226728, 0.8610886940995807, 0.8660336269683061, 0.8709452816907308, 0.875820093528736, 0.8806544977442033, 0.8854449295990139, 0.8901878243550492, 0.8948796172741909, 0.8995167436183208, 0.9040956386493195, 0.9086127376290689, 0.9130644758194506, 0.917447288482346, 0.9217576108796364, 0.9259918782732036, 0.9301465259249283, 0.9342179890966927, 0.9382027030503781, 0.9420971030478656, 0.9458976243510374, 0.9496007022217741, 0.9532027719219578, 0.9567002687134696, 0.9600896278581907, 0.9633672846180033, 0.9665296742547886, 0.9695732320304276, 0.9724943932068022, 0.9752895930457937, 0.9779552668092837, 0.9804878497591534, 0.9828837771572845, 0.9851394842655585, 0.9872514063458564, 0.9892159786600603, 0.991029636470051, 0.9926888150377106, 0.9941899496249201, 0.9955294754935613, 0.9967038279055156, 0.9977094421226641, 0.9985427534068884, 0.9992001970200703, 0.9996782082240908, 0.9999732222808316, 1.0]
        y = [0.1, 0.1, 0.25, 0.25, 0.2985971943887775, 0.3006012024048096, 0.30260521042084165, 0.3046092184368737, 0.3066132264529058, 0.30861723446893785, 0.3106212424849699, 0.312625250501002, 0.312625250501002, 0.31462925851703405, 0.3166332665330661, 0.3186372745490982, 0.32064128256513025, 0.3226452905811623, 0.3246492985971944, 0.32665330661322645, 0.32665330661322645, 0.46492985971943884, 0.46492985971943884, 0.8, 0.8, 0.8537074148296593, 0.8557114228456913, 0.8577154308617234, 0.8597194388777555, 0.8617234468937875, 0.8637274549098196, 0.8657314629258517, 0.8677354709418837, 0.8697394789579158, 0.8717434869739479, 0.8737474949899798, 0.8757515030060119, 0.877755511022044, 0.879759519038076, 0.8817635270541081, 0.8837675350701402, 0.8857715430861722, 0.8877755511022043, 0.8897795591182364, 0.8917835671342684, 0.8937875751503005, 0.8957915831663326, 0.8977955911823646, 0.8997995991983967, 0.9018036072144288, 0.9038076152304608, 0.9058116232464929, 0.907815631262525, 0.909819639278557, 0.9118236472945891, 0.9138276553106212, 0.9158316633266532, 0.9178356713426853, 0.9198396793587174, 0.9218436873747494, 0.9238476953907815, 0.9258517034068136, 0.9278557114228456, 0.9298597194388777, 0.9318637274549098, 0.9338677354709418, 0.9358717434869739, 0.937875751503006, 0.939879759519038, 0.9418837675350701, 0.9438877755511021, 0.9458917835671342, 0.9478957915831663, 0.9498997995991983, 0.9519038076152304, 0.9539078156312625, 0.9559118236472945, 0.9579158316633266, 0.9599198396793587, 0.9619238476953907, 0.9639278557114228, 0.9659318637274549, 0.9679358717434869, 0.969939879759519, 0.9719438877755511, 0.9739478957915831, 0.9759519038076151, 0.9779559118236472, 0.9799599198396792, 0.9819639278557113, 0.9839679358717434, 0.9859719438877754, 0.9879759519038075, 0.9899799599198396, 0.9919839679358716, 0.9939879759519037, 0.9959919839679358, 1.0]
        plt.fill_between(x, y, 1, color='blue', alpha=.1)

    plt.scatter([0.22796545219495468, 0.3431373136961936, 0.617639662274638, 0.671768850712885, 0.7585918461056117], [0.25, 0.2985971943887775, 0.46492985971943884, 0.8, 0.854809619238477], color='blue', zorder=2)
    plt.scatter([0.22796545219495468, 0.3431373136961936, 0.617639662274638, 0.671768850712885, 0.7585918461056117], [0.1, 0.25, 0.32665330661322645, 0.46492985971943884, 0.8], color='blue',
                facecolors='none', zorder=3)
    plt.plot([0.0, 0.22796545219495468], [0.1, 0.1], 'b-', drawstyle='steps-post')
    plt.plot([0.2280251270926629, 0.3431373136961936], [0.25, 0.25], 'b-', drawstyle='steps-post')
    xs = [0.34402288826719696, 0.34800358066734777, 0.3552195543542417, 0.36545747666697875, 0.378477872978931, 0.3940412686634702, 0.41190818909396854,
          0.4318391596437977]
    ys = [0.2985971943887775, 0.3006012024048096, 0.30260521042084165, 0.3046092184368737, 0.3066132264529058, 0.30861723446893785, 0.3106212424849699,
          0.312625250501002]
    plt.plot(xs, ys, 'b')
    xs = [0.4318391596437977, 0.45359470568633004, 0.47693535259493725, 0.5016216257429914, 0.5274140505038646, 0.5540731522509286, 0.5813594563575553,
          0.6090334881971169, 0.6176915438951646]
    ys = [0.312625250501002, 0.31462925851703405, 0.3166332665330661, 0.3186372745490982, 0.32064128256513025, 0.3226452905811623, 0.3246492985971944,
          0.32665330661322645, 0.32665330661322645]
    plt.plot(xs, ys, 'magenta')
    #plt.plot([0.3444122023091325, 0.617639662274638], [0.4, 0.4], 'b-', drawstyle='steps-post')
    plt.plot([0.6179681202052336, 0.671768850712885], [0.46492985971943884, 0.46492985971943884], 'b-', drawstyle='steps-post')
    xs = [0.7589293331225391, 0.7595826118703779, 0.7606313440066891, 0.7620569202863146, 0.7638407314640964, 0.7659641682948762, 0.7684086215334963,
          0.7711554819347984, 0.7741861402536248, 0.7774819872448172, 0.7810244136632177, 0.7847948102636682, 0.7887745678010106, 0.7929450770300874,
          0.7972877287057399, 0.8017839135828104, 0.8064150224161408, 0.8111624459605732, 0.8160075749709492, 0.8209318002021115, 0.8259165124089012,
          0.8309431023461609, 0.8359929607687323, 0.8410474784314573, 0.8460898739967836, 0.8511132528757007, 0.8561140478226728, 0.8610886940995807,
          0.8660336269683061, 0.8709452816907308, 0.875820093528736, 0.8806544977442033, 0.8854449295990139, 0.8901878243550492, 0.8948796172741909,
          0.8995167436183208, 0.9040956386493195, 0.9086127376290689, 0.9130644758194506, 0.917447288482346, 0.9217576108796364, 0.9259918782732036,
          0.9301465259249283, 0.9342179890966927, 0.9382027030503781, 0.9420971030478656, 0.9458976243510374, 0.9496007022217741, 0.9532027719219578,
          0.9567002687134696, 0.9600896278581907, 0.9633672846180033, 0.9665296742547886, 0.9695732320304276, 0.9724943932068022, 0.9752895930457937,
          0.9779552668092837, 0.9804878497591534, 0.9828837771572845, 0.9851394842655585, 0.9872514063458564, 0.9892159786600603, 0.991029636470051,
          0.9926888150377106, 0.9941899496249201, 0.9955294754935613, 0.9967038279055156, 0.9977094421226641, 0.9985427534068884, 0.9992001970200703,
          0.9996782082240908, 0.9999732222808316, 1.0]
    ys = [0.8537074148296593, 0.8557114228456913, 0.8577154308617234, 0.8597194388777555, 0.8617234468937875, 0.8637274549098196, 0.8657314629258517,
          0.8677354709418837, 0.8697394789579158, 0.8717434869739479, 0.8737474949899798, 0.8757515030060119, 0.877755511022044, 0.879759519038076,
          0.8817635270541081, 0.8837675350701402, 0.8857715430861722, 0.8877755511022043, 0.8897795591182364, 0.8917835671342684, 0.8937875751503005,
          0.8957915831663326, 0.8977955911823646, 0.8997995991983967, 0.9018036072144288, 0.9038076152304608, 0.9058116232464929, 0.907815631262525,
          0.909819639278557, 0.9118236472945891, 0.9138276553106212, 0.9158316633266532, 0.9178356713426853, 0.9198396793587174, 0.9218436873747494,
          0.9238476953907815, 0.9258517034068136, 0.9278557114228456, 0.9298597194388777, 0.9318637274549098, 0.9338677354709418, 0.9358717434869739,
          0.937875751503006, 0.939879759519038, 0.9418837675350701, 0.9438877755511021, 0.9458917835671342, 0.9478957915831663, 0.9498997995991983,
          0.9519038076152304, 0.9539078156312625, 0.9559118236472945, 0.9579158316633266, 0.9599198396793587, 0.9619238476953907, 0.9639278557114228,
          0.9659318637274549, 0.9679358717434869, 0.969939879759519, 0.9719438877755511, 0.9739478957915831, 0.9759519038076151, 0.9779559118236472,
          0.9799599198396792, 0.9819639278557113, 0.9839679358717434, 0.9859719438877754, 0.9879759519038075, 0.9899799599198396, 0.9919839679358716,
          0.9939879759519037, 0.9959919839679358, 1.0]
    plt.plot(xs, ys, 'magenta')
    return plt.plot([0.671768850712885, 0.7585918461056117], [0.8, 0.8], 'b-', drawstyle='steps-post')

def draw_star2(rect=False):
    if rect:
        x = [0.0, 0.22796545219495468, 0.2280251270926629, 0.4318391596437977, 0.4318391596437977, 0.45359470568633004, 0.47693535259493725, 0.5016216257429914, 0.5274140505038646, 0.5540731522509286, 0.5813594563575553, 0.6090334881971169, 0.6176915438951646, 0.6179681202052336, 0.7585918461056117, 0.7589293331225391, 0.7595826118703779, 0.7606313440066891, 0.7620569202863146, 0.7638407314640964, 0.7659641682948762, 0.7684086215334963, 0.7711554819347984, 0.7741861402536248, 0.7774819872448172, 0.7810244136632177, 0.7847948102636682, 0.7887745678010106, 0.7929450770300874, 0.7972877287057399, 0.8017839135828104, 0.8064150224161408, 0.8111624459605732, 0.8160075749709492, 0.8209318002021115, 0.8259165124089012, 0.8309431023461609, 0.8359929607687323, 0.8410474784314573, 0.8460898739967836, 0.8511132528757007, 0.8561140478226728, 0.8610886940995807, 0.8660336269683061, 0.8709452816907308, 0.875820093528736, 0.8806544977442033, 0.8854449295990139, 0.8901878243550492, 0.8948796172741909, 0.8995167436183208, 0.9040956386493195, 0.9086127376290689, 0.9130644758194506, 0.917447288482346, 0.9217576108796364, 0.9259918782732036, 0.9301465259249283, 0.9342179890966927, 0.9382027030503781, 0.9420971030478656, 0.9458976243510374, 0.9496007022217741, 0.9532027719219578, 0.9567002687134696, 0.9600896278581907, 0.9633672846180033, 0.9665296742547886, 0.9695732320304276, 0.9724943932068022, 0.9752895930457937, 0.9779552668092837, 0.9804878497591534, 0.9828837771572845, 0.9851394842655585, 0.9872514063458564, 0.9892159786600603, 0.991029636470051, 0.9926888150377106, 0.9941899496249201, 0.9955294754935613, 0.9967038279055156, 0.9977094421226641, 0.9985427534068884, 0.9992001970200703, 0.9996782082240908, 0.9999732222808316, 1.0]
        y = [0.1, 0.1, 0.25, 0.25, 0.312625250501002, 0.31462925851703405, 0.3166332665330661, 0.3186372745490982, 0.32064128256513025, 0.3226452905811623, 0.3246492985971944, 0.32665330661322645, 0.32665330661322645, 0.32665330661322645, 0.32665330661322645, 0.8537074148296593, 0.8557114228456913, 0.8577154308617234, 0.8597194388777555, 0.8617234468937875, 0.8637274549098196, 0.8657314629258517, 0.8677354709418837, 0.8697394789579158, 0.8717434869739479, 0.8737474949899798, 0.8757515030060119, 0.877755511022044, 0.879759519038076, 0.8817635270541081, 0.8837675350701402, 0.8857715430861722, 0.8877755511022043, 0.8897795591182364, 0.8917835671342684, 0.8937875751503005, 0.8957915831663326, 0.8977955911823646, 0.8997995991983967, 0.9018036072144288, 0.9038076152304608, 0.9058116232464929, 0.907815631262525, 0.909819639278557, 0.9118236472945891, 0.9138276553106212, 0.9158316633266532, 0.9178356713426853, 0.9198396793587174, 0.9218436873747494, 0.9238476953907815, 0.9258517034068136, 0.9278557114228456, 0.9298597194388777, 0.9318637274549098, 0.9338677354709418, 0.9358717434869739, 0.937875751503006, 0.939879759519038, 0.9418837675350701, 0.9438877755511021, 0.9458917835671342, 0.9478957915831663, 0.9498997995991983, 0.9519038076152304, 0.9539078156312625, 0.9559118236472945, 0.9579158316633266, 0.9599198396793587, 0.9619238476953907, 0.9639278557114228, 0.9659318637274549, 0.9679358717434869, 0.969939879759519, 0.9719438877755511, 0.9739478957915831, 0.9759519038076151, 0.9779559118236472, 0.9799599198396792, 0.9819639278557113, 0.9839679358717434, 0.9859719438877754, 0.9879759519038075, 0.9899799599198396, 0.9919839679358716, 0.9939879759519037, 0.9959919839679358, 1.0]
        plt.fill_between(x, y, 1, color='blue', alpha=.1)

    plt.scatter([0.22796545219495468, 0.4318391596437977, 0.7585918461056117], [0.25, 0.312625250501002, 0.854809619238477], color='blue', zorder=2)
    plt.scatter([0.22796545219495468], [0.1], color='blue', facecolors='none', zorder=3, s=100)
    plt.scatter([0.4318391596437977, 0.7585918461056117], [0.25, 0.32665330661322645], color='blue', zorder=2, s=100)
    plt.plot([0.0, 0.22796545219495468], [0.1, 0.1], 'b-', drawstyle='steps-post')
    plt.plot([0.2280251270926629, 0.4318391596437977], [0.25, 0.25], 'b-', drawstyle='steps-post')
    xs = [0.4318391596437977, 0.45359470568633004, 0.47693535259493725, 0.5016216257429914, 0.5274140505038646, 0.5540731522509286, 0.5813594563575553,
          0.6090334881971169, 0.6176915438951646]
    ys = [0.312625250501002, 0.31462925851703405, 0.3166332665330661, 0.3186372745490982, 0.32064128256513025, 0.3226452905811623, 0.3246492985971944,
          0.32665330661322645, 0.32665330661322645]
    plt.plot(xs, ys, 'magenta')

    xs = [0.7589293331225391, 0.7595826118703779, 0.7606313440066891, 0.7620569202863146, 0.7638407314640964, 0.7659641682948762, 0.7684086215334963,
          0.7711554819347984, 0.7741861402536248, 0.7774819872448172, 0.7810244136632177, 0.7847948102636682, 0.7887745678010106, 0.7929450770300874,
          0.7972877287057399, 0.8017839135828104, 0.8064150224161408, 0.8111624459605732, 0.8160075749709492, 0.8209318002021115, 0.8259165124089012,
          0.8309431023461609, 0.8359929607687323, 0.8410474784314573, 0.8460898739967836, 0.8511132528757007, 0.8561140478226728, 0.8610886940995807,
          0.8660336269683061, 0.8709452816907308, 0.875820093528736, 0.8806544977442033, 0.8854449295990139, 0.8901878243550492, 0.8948796172741909,
          0.8995167436183208, 0.9040956386493195, 0.9086127376290689, 0.9130644758194506, 0.917447288482346, 0.9217576108796364, 0.9259918782732036,
          0.9301465259249283, 0.9342179890966927, 0.9382027030503781, 0.9420971030478656, 0.9458976243510374, 0.9496007022217741, 0.9532027719219578,
          0.9567002687134696, 0.9600896278581907, 0.9633672846180033, 0.9665296742547886, 0.9695732320304276, 0.9724943932068022, 0.9752895930457937,
          0.9779552668092837, 0.9804878497591534, 0.9828837771572845, 0.9851394842655585, 0.9872514063458564, 0.9892159786600603, 0.991029636470051,
          0.9926888150377106, 0.9941899496249201, 0.9955294754935613, 0.9967038279055156, 0.9977094421226641, 0.9985427534068884, 0.9992001970200703,
          0.9996782082240908, 0.9999732222808316, 1.0]
    ys = [0.8537074148296593, 0.8557114228456913, 0.8577154308617234, 0.8597194388777555, 0.8617234468937875, 0.8637274549098196, 0.8657314629258517,
          0.8677354709418837, 0.8697394789579158, 0.8717434869739479, 0.8737474949899798, 0.8757515030060119, 0.877755511022044, 0.879759519038076,
          0.8817635270541081, 0.8837675350701402, 0.8857715430861722, 0.8877755511022043, 0.8897795591182364, 0.8917835671342684, 0.8937875751503005,
          0.8957915831663326, 0.8977955911823646, 0.8997995991983967, 0.9018036072144288, 0.9038076152304608, 0.9058116232464929, 0.907815631262525,
          0.909819639278557, 0.9118236472945891, 0.9138276553106212, 0.9158316633266532, 0.9178356713426853, 0.9198396793587174, 0.9218436873747494,
          0.9238476953907815, 0.9258517034068136, 0.9278557114228456, 0.9298597194388777, 0.9318637274549098, 0.9338677354709418, 0.9358717434869739,
          0.937875751503006, 0.939879759519038, 0.9418837675350701, 0.9438877755511021, 0.9458917835671342, 0.9478957915831663, 0.9498997995991983,
          0.9519038076152304, 0.9539078156312625, 0.9559118236472945, 0.9579158316633266, 0.9599198396793587, 0.9619238476953907, 0.9639278557114228,
          0.9659318637274549, 0.9679358717434869, 0.969939879759519, 0.9719438877755511, 0.9739478957915831, 0.9759519038076151, 0.9779559118236472,
          0.9799599198396792, 0.9819639278557113, 0.9839679358717434, 0.9859719438877754, 0.9879759519038075, 0.9899799599198396, 0.9919839679358716,
          0.9939879759519037, 0.9959919839679358, 1.0]
    plt.plot(xs, ys, 'magenta')

    return plt.plot([0.6179681202052336, 0.7585918461056117], [0.32665330661322645, 0.32665330661322645], 'b-', drawstyle='steps-post')

def draw_star1(rect=False):
    if rect:
        x = [0.22796545219495468, 0.22796545219495468, 0.4318391596437977, 0.4318391596437977, 0.4318391596437977, 0.45359470568633004, 0.47693535259493725, 0.5016216257429914, 0.5274140505038646, 0.5540731522509286, 0.5813594563575553, 0.6090334881971169, 0.6176915438951646, 0.7585918461056117, 0.7585918461056117, 0.7589293331225391, 0.7595826118703779, 0.7606313440066891, 0.7620569202863146, 0.7638407314640964, 0.7659641682948762, 0.7684086215334963, 0.7711554819347984, 0.7741861402536248, 0.7774819872448172, 0.7810244136632177, 0.7847948102636682, 0.7887745678010106, 0.7929450770300874, 0.7972877287057399, 0.8017839135828104, 0.8064150224161408, 0.8111624459605732, 0.8160075749709492, 0.8209318002021115, 0.8259165124089012, 0.8309431023461609, 0.8359929607687323, 0.8410474784314573, 0.8460898739967836, 0.8511132528757007, 0.8561140478226728, 0.8610886940995807, 0.8660336269683061, 0.8709452816907308, 0.875820093528736, 0.8806544977442033, 0.8854449295990139, 0.8901878243550492, 0.8948796172741909, 0.8995167436183208, 0.9040956386493195, 0.9086127376290689, 0.9130644758194506, 0.917447288482346, 0.9217576108796364, 0.9259918782732036, 0.9301465259249283, 0.9342179890966927, 0.9382027030503781, 0.9420971030478656, 0.9458976243510374, 0.9496007022217741, 0.9532027719219578, 0.9567002687134696, 0.9600896278581907, 0.9633672846180033, 0.9665296742547886, 0.9695732320304276, 0.9724943932068022, 0.9752895930457937, 0.9779552668092837, 0.9804878497591534, 0.9828837771572845, 0.9851394842655585, 0.9872514063458564, 0.9892159786600603, 0.991029636470051, 0.9926888150377106, 0.9941899496249201, 0.9955294754935613, 0.9967038279055156, 0.9977094421226641, 0.9985427534068884, 0.9992001970200703, 0.9996782082240908, 0.9999732222808316, 1.0]
        y = [0.0, 0.25, 0.25, 0.312625250501002, 0.312625250501002, 0.31462925851703405, 0.3166332665330661, 0.3186372745490982, 0.32064128256513025, 0.3226452905811623, 0.3246492985971944, 0.32665330661322645, 0.32665330661322645, 0.32665330661322645, 0.854809619238477, 0.8537074148296593, 0.8557114228456913, 0.8577154308617234, 0.8597194388777555, 0.8617234468937875, 0.8637274549098196, 0.8657314629258517, 0.8677354709418837, 0.8697394789579158, 0.8717434869739479, 0.8737474949899798, 0.8757515030060119, 0.877755511022044, 0.879759519038076, 0.8817635270541081, 0.8837675350701402, 0.8857715430861722, 0.8877755511022043, 0.8897795591182364, 0.8917835671342684, 0.8937875751503005, 0.8957915831663326, 0.8977955911823646, 0.8997995991983967, 0.9018036072144288, 0.9038076152304608, 0.9058116232464929, 0.907815631262525, 0.909819639278557, 0.9118236472945891, 0.9138276553106212, 0.9158316633266532, 0.9178356713426853, 0.9198396793587174, 0.9218436873747494, 0.9238476953907815, 0.9258517034068136, 0.9278557114228456, 0.9298597194388777, 0.9318637274549098, 0.9338677354709418, 0.9358717434869739, 0.937875751503006, 0.939879759519038, 0.9418837675350701, 0.9438877755511021, 0.9458917835671342, 0.9478957915831663, 0.9498997995991983, 0.9519038076152304, 0.9539078156312625, 0.9559118236472945, 0.9579158316633266, 0.9599198396793587, 0.9619238476953907, 0.9639278557114228, 0.9659318637274549, 0.9679358717434869, 0.969939879759519, 0.9719438877755511, 0.9739478957915831, 0.9759519038076151, 0.9779559118236472, 0.9799599198396792, 0.9819639278557113, 0.9839679358717434, 0.9859719438877754, 0.9879759519038075, 0.9899799599198396, 0.9919839679358716, 0.9939879759519037, 0.9959919839679358, 1.0]
        plt.fill_betweenx(y, x, 1, color='red', alpha=.1)

    plt.scatter([0.4318391596437977, 0.7585918461056117], [0.25, 0.32665330661322645], color='red', zorder=3)
    plt.scatter([0.22796545219495468], [0.25], color='red', zorder=2, s=100)
    plt.vlines(x=0.22796545219495468, ymin=0.0, ymax=0.25, color='red', zorder=1)
    plt.vlines(x=0.4318391596437977, ymin=0.25, ymax=0.312625250501002, color='red', zorder=1)
    return plt.vlines(x=0.7585918461056117, ymin=0.32665330661322645, ymax=0.854809619238477, color='red', zorder=1)

def draw_stars_end(x, y, rect=False):
    last = 0
    delta = 0.1
    xs = [0.0]
    ys = [0.0]
    for i in range(len(x)):
        if y[i] - last > delta:
            xs.append(x[i])
            ys.append(last)
            xs = []
            ys = []
        else:
            xs.append(x[i])
            ys.append(y[i])
        last = y[i]
    plt.plot(xs, ys, 'magenta')
    if rect:
        plt.fill_between(xs, ys, 1, color='blue', alpha=.1)
        plt.fill_betweenx(ys, xs, 1, color='red', alpha=.1)

def draw_stars(rect=False):
    h1 = draw_star1(rect)
    h2, = draw_star2(rect)

    plt.xlabel("$v_1$", fontsize=14)
    plt.ylabel("$v_2$", fontsize=14)
    plt.legend([h1, h2], ["$f_1^*(v_2)$", "$f_2^*(v_1)$"])
    plt.grid()
    plt.show()

def draw_prime_and_star(rect=False):
    h1 = draw_star1(rect)
    h2, = draw_prime2(rect)
    #handler_r1 = draw_restrictions1()

    plt.xlabel("$v_1$", fontsize=14)
    plt.ylabel("$v_2$", fontsize=14)
    plt.legend([h1, h2], ["$f_1^*(v_2)$", "$f_2'(v_1)$"])
    plt.grid()
    plt.show()

def draw_restrictions1():
    #plt.scatter([0.0, 0.22796545219495468, 0.3431373136961936, 0.617639662274638],[0.1, 0.25, 0.2985971943887775, 0.8], color='orange', facecolors='none', zorder=3)
    #plt.scatter([0.22796545219495468, 0.3431373136961936, 0.617639662274638, 0.7585918461056117], [0.1, 0.25, 0.32665330661322645, 0.8], color='orange', zorder=2)
    plt.vlines(x=0.0, ymin=0.0, ymax=0.1, color='orange', zorder=1)
    plt.vlines(x=0.22796545219495468, ymin=0.1, ymax=0.25, color='orange', zorder=1)
    plt.vlines(x=0.3431373136961936, ymin=0.25, ymax=0.2985971943887775, color='orange', zorder=1)
    plt.vlines(x=0.617639662274638, ymin=0.32665330661322645, ymax=0.46492985971943884, color='orange', zorder=1)
    plt.vlines(x=0.671768850712885, ymin=0.46492985971943884, ymax=0.8, color='orange', zorder=1)
    return plt.vlines(x=0.7585918461056117, ymin=0.8, ymax=0.854809619238477, color='orange', zorder=1)

def draw_f2prime_restrictions():
    handle2, = draw_prime2()
    handler_r1 = draw_restrictions1()

    plt.xlabel("$v_1$", fontsize=14)
    plt.ylabel("$v_2$", fontsize=14)
    plt.legend([handle2, handler_r1], ["$f_2'(v_1)$", "$r_1^{f_2'}(v_1)$"])
    plt.grid()
    plt.show()


def draw_random_ex_restrictions():
    X_, Y_1, Y_2 = get_ex_data()
    R = get_restrictions(Y_2, X_)

    handle1, = plt.plot(Y_2, X_, 'r')
    handle_r2, = draw_restrictions2(list(R.keys()), list(R.values()))
    handle2, = draw_prime2()
    handler_r1 = draw_restrictions1()

    plt.xlabel("$v_1$", fontsize=14)
    plt.ylabel("$v_2$", fontsize=14)
    #plt.legend([handle1, handle_r2], ["$f_1(v_2)$", "$r_2^{f_1}(v_1)$"])
    #plt.legend([handle1, handle_r2, handle2], ["$f_1(v_2)$", "$r_2^{f_1}(v_1)$", "$f_2'(v_1)$"])
    plt.legend([handle1, handle_r2, handle2, handler_r1], ["$f_1(v_2)$", "$r_2^{f_1}(v_1)$", "$f_2'(v_1)$", "$r_1^{f_2'}(v_1)$"])
    plt.grid()
    plt.show()

def draw_random_ex():
    X_, Y_1, Y_2 = get_ex_data()

    plt.plot(Y_2, X_, 'r')
    plt.plot(X_, Y_1, 'b')
    plt.xlabel("$v_1$", fontsize=14)
    plt.ylabel("$v_2$", fontsize=14)
    plt.legend(["$f_1(v_2)$", "$f_2(v_1)$"])

    plt.grid()
    plt.show()

def draw_funcs(f_1, f_2, p_1, p_2, title):
    plt.figure(figsize=(6, 6))

    x1 = np.array(list(f_1.values()))
    y1 = np.array(list(f_1.keys()))
    x2 = np.array(list(f_2.keys()))
    y2 = np.array(list(f_2.values()))
    plt.plot(x1[:p_2], y1[:p_2], 'r-', drawstyle='steps-post')
    plt.plot(x2[:p_1], y2[:p_1], 'b-', drawstyle='steps-post')
    plt.plot(x1[p_2:], y1[p_2:], 'm-', drawstyle='steps-post')
    plt.plot(x2[p_1:], y2[p_1:], 'm-', drawstyle='steps-post')

    plt.xlabel("$v_1$", fontsize=14)
    plt.ylabel("$v_2$", fontsize=14)
    plt.title(title, fontsize=16, y=1.01)
    plt.legend(["$f_1(v_2)$", "$f_2(v_1)$"])
    plt.axis('square')
    plt.grid()

    plt.tight_layout()
    plt.show()

def draw_funcs_disc(f_1, f_2):
    x1 = np.array(list(f_1.values()))
    y1 = np.array(list(f_1.keys()))
    x2 = np.array(list(f_2.keys()))
    y2 = np.array(list(f_2.values()))
    plt.plot(x1, y1, 'r-', drawstyle='steps-post')
    plt.plot(x2, y2, 'b-', drawstyle='steps-post')
    plt.plot((0.0, 1.0), (0.0, 1.0), color='green')

    plt.xlabel("$v_1$", fontsize=14)
    plt.ylabel("$v_2$", fontsize=14)
    plt.legend(["$f_1(v_2)$", "$f_2(v_1)$"])

    plt.grid()
    plt.show()

def draw_matrix(G):
    plt.imshow(G, cmap='hot', interpolation='nearest')
    plt.show()

def draw_truncated():
    p1 = patches.Rectangle((0.375, 0.3), 0.05, 0.7, facecolor='g', alpha=0.3)
    p2 = patches.Rectangle((0.5, 0.3), 0.5, 0.7, facecolor='orange', alpha=0.3)

    ax = plt.gca()
    ax.add_patch(p1)
    ax.add_patch(p2)

    for i in np.arange(0.4, 1.1, 0.1):
        plt.scatter([i] * 8, np.arange(0.3, 1.1, 0.1), color='black')

    plt.xticks(np.arange(0, 1.1, 0.1))
    plt.yticks(np.arange(0, 1.1, 0.1))

    plt.grid()
    plt.show()

if __name__ == "__main__":
    draw_stars()